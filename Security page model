require("uci")
local t,cak
x = uci.cursor()
local weekdays = {}
local _weekdays={}
local re_weekdays_fun={}
local mon1,tue1,wed1,thu1,fri1,sat1,sun1={},{},{},{},{},{},{}

m = Map("access_control" , "Security Page") -- We want to edit the uci config file /etc/config/network
s = m:section(NamedSection, "general","","","") -- Especially the "interface"-sections

list = s:option(Value, "anonymouse", "") -- or whatever creating a Value
list.template = "security_page/security_page"

function get_name(name)
    local v = _G
    if name=="" then
        return ""
    end
    for i in name.gfind(name , "[%w_]+") do
        v = i
    end
    return v
end


function get_src_mac(mac)
    local v = _G
    if mac=="" then
        return 0
    end
    for i in mac.gfind(mac , "[%d_]+") do
        v = i
    end
    return v
end


function mysplit(s)
    local words = {}
    local i=1
	

    if type(s)=="nil" then return {} end	

    for word in s:gmatch("%w+") do
        table.insert(words, word)
    end

    return words
end

function weekdays_fun(week)
    local weekdays_str=""
    if type(week)=="table" then
        weekdays_str=" "..table.concat(week," ").." "
    end

    return weekdays_str
end

submit = luci.http.formvalue("cbi.apply") or ""




if submit ~= "" then


    description1= luci.http.formvalue("description1") or ""
    src_mac1  = luci.http.formvalue("mac_address1") or ""
    start_time1 = luci.http.formvalue("start_time1") or ""
    end_time1 = luci.http.formvalue("end_time1") or ""
    enabled1 = luci.http.formvalue("cbid.access_control.general.enabled") or ""




    if type(description1) == "table" then
        for i=1,table.getn(description1),1 do
            weekdays[i] = luci.http.formvalue("weekdays"..i)
        end

        for i=1,table.getn(description1),1 do
		if type(weekdays[i])=="table" then
            		re_weekdays_fun[i] = weekdays_fun(weekdays[i])
		else
			re_weekdays_fun[i] = weekdays[i] or "nil"

		end
        end

    end


    if type(description1) ~= "table" then

        test_name = get_name(description1)

    end

    if type(src_mac1) ~= "table" then
        test_src_mac  = get_src_mac (src_mac1)
    end

    --test_start_time1 = get_time(start_time1)
    --test_university = get_university(university)





    if type(description1) == "table" then
        if type(description1)=="" or table.getn(description1)<2 then
            _msg= "invalid name"
        end
    end

    if type(src_mac1) == "table" then
        if table.getn(src_mac1)~=11 then
            _msg = "invalid mac Address"
        end
    end

    --list.name = get_name(person_name)
    --list.phone_number = get_phone_number(phone_number)
    --list.age = get_age(age)
    --list.university = get_university(university)


    if type(description1) == "table" then

        s_a = x:set("network1", "table", "name", description1)
        s_b = x:set("network1", "table", "src_mac1",src_mac1  )
        s_c = x:set("network1", "table", "start_time",start_time1)
        s_d = x:set("network1", "table", "stop_time",end_time1)
        s_e = x:set("network1", "table", "enabled",enabled1)
        s_weekdays = x:set("network1", "table","weekdays",re_weekdays_fun)
        x:save("network1")
        x:commit("network1")

    else if test_name~="" and  type(description1) ~= "table" then

        s_a = x:set("network1", "table", "name", description1)
        s_b = x:set("network1", "table", "src_mac1",src_mac1  )
        s_c = x:set("network1", "table", "start_time",start_time1)
        s_d = x:set("network1", "table", "stop_time",end_time1)
        s_e = x:set("network1", "table", "enabled",enabled1)
        s_weekdays = x:set("network1", "table","weekdays",weekdays)
        x:save("network1")
        x:commit("network1")

    end
    end



end ------add


a = x:get("network1", "table", "name")
b = x:get("network1", "table", "src_mac1" )
c = x:get("network1", "table", "start_time" )
d = x:get("network1", "table", "stop_time")
e = x:get("network1", "table", "enabled")
f = x:get("network1","table",  "weekdays")


for i=1,table.getn(a),1 do
  _weekdays[i] = mysplit(f[i])

	for j=1,7,1 do
	    if _weekdays[i][j] == "mon" then mon1[i] = "checked='checked' " end
	    if _weekdays[i][j] == "thu" then thu1[i] = "checked='checked' " end
	    if _weekdays[i][j] == "sat" then sat1[i] = "checked='checked' " end
	    if _weekdays[i][j] == "sun" then sun1[i] = "checked='checked' " end
	    if _weekdays[i][j] == "wed" then wed1[i] = "checked='checked' " end
	    if _weekdays[i][j] == "tue" then tue1[i] = "checked='checked' " end
	    if _weekdays[i][j] == "fri" then fri1[i] = "checked='checked' " end
	end
end


if e=="1" then
    _enabled=" checked='checked' "
else
    _enabled=""
end


local test_name,test_src_mac,start_time,stop_time,enabled,monday,tuesday,wednesday,thusday,friday,satarday,sunday


if type(a) == "table" then
    list.data = {test_name = a, test_src_mac = b, start_time=c, stop_time=d ,enabled = _enabled , monday = mon1, tuesday = tue1, wednesday = wed1, thursday = thu1, friday =fri1, saturday =sat1, sunday = sun1 ,msg=_msg}

end

return m



