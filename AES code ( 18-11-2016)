local nr,nk,tmp,tm,t,round,in1 = {}
key = {}
temp_keyexpansion = {}
roundkey = {}
state = {{ }}
local temp_shiftrows
out = {}


sbox =   {
	--0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, --0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, --1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, --2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, --3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, --4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, --5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, --6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, --7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, --8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, --9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, --A
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, --B
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, --C
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, --D
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, --E
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } --F


rcon = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  }


--recieve the length of the key

--while nr~=128 and nr~=192 and nr~=256 do

print("")
print("Enter the length of Key(128, 192 or 256 only):")
nr = io.read()

--end 

--calculate nk and nr from the recieved value
nk = nr/32
nr = nk+6



 temp[32] = {0x00  ,0x01  ,0x02  ,0x03  ,0x04  ,0x05  ,0x06  ,0x07  ,0x08  ,0x09  ,0x0a  ,0x0b  ,0x0c  ,0x0d  ,0x0e  ,0x0f}
 temp2[32]= {0x00  ,0x11  ,0x22  ,0x33  ,0x44  ,0x55  ,0x66  ,0x77  ,0x88  ,0x99  ,0xaa  ,0xbb  ,0xcc  ,0xdd  ,0xee  ,0xff}
 

for i=0,(nk*4)-1,1 do 

key[i] = temp[i]
in1[i] = temp2[i]

end

print("")
print("Enter the Key in hexadecimal: ")

for i=0,(nk*4)-1,1 do
io.read(key[i])
end

print("")
print("Enter the PlainText in hexadecimal: ")

for i=0,(nb*4)-1,1 do
in1[i] = io.read()
end



--This function produces Nb(Nr+1) round keys. The round keys are used in each round to encrypt the states.

-- -------------------void keyexpansion

for i=0,nk-1,1 do

roundkey[i*4] = key[i*4]
roundkey[i*4+1] = key[i*4+1]
roundkey[i*4+2] = key[i*4+2]
roundkey[i*4+3] = key[i*4+3]

end

while i<(nb*(nr+1)) do

for j=0,4-1,1 do
temp_keyexpansion[j]=roundkey[(i-1) * 4 + j]
end

end

if i%nk==0 then

k = temp_keyexpansion[0]
temp_keyexpansion[0] = temp_keyexpansion[1]
temp_keyexpansion[1] = temp_keyexpansion[2]
temp_keyexpansion[2] = temp_keyexpansion[3]
temp_keyexpansion[3] = k

temp_keyexpansion[0] = sbox[temp_keyexpansion[0]]
temp_keyexpansion[1] = sbox[temp_keyexpansion[1]]
temp_keyexpansion[2] = sbox[temp_keyexpansion[2]]
temp_keyexpansion[3] = sbox[temp_keyexpansion[3]]

temp_keyexpansion[0] = temp_keyexpansion[0] ^ rcon[i/nk]

else if nk>6 and i%nk == 4 then 

temp_keyexpansion[0] = sbox[temp_keyexpansion[0]]
temp_keyexpansion[1] = sbox[temp_keyexpansion[1]]
temp_keyexpansion[2] = sbox[temp_keyexpansion[2]]
temp_keyexpansion[3] = sbox[temp_keyexpansion[3]]

end


roundkey[i*4+0] = roundkey[(i-nk)*4+0] ^  temp_keyexpansion[0]
roundkey[i*4+1] = roundkey[(i-nk)*4+1] ^  temp_keyexpansion[1]
roundkey[i*4+2] = roundkey[(i-nk)*4+2] ^  temp_keyexpansion[2]
roundkey[i*4+3] = roundkey[(i-nk)*4+3] ^  temp_keyexpansion[3]

i = i+1
end 

--Cipher is the main function that encrypts the PlainText.
--  ------------------------------- void cipher()


--Copy the input PlainText to state array

for i=0,4-1,1 do
for j=0,4-1,1 do

state[j][i]  = in1[i*4+j]

end
end

--AddRoundKey(0)

for i=0,4-1,1 do
for j=0,4-1,1 do

state[j][i] =state[i][j] ^roundkey[0]

end
end

--There will be Nr rounds.
--The first Nr-1 rounds are identical.
--These Nr-1 rounds are executed in the loop below.

--SubBytes()
for round=0,nr-1,1 do

for i=0,4-1,1 do
for j=0,4-1,1 do

state[i][j] = sbox[state[i][j]]

end
end

--ShiftRows()

--Rotate first row 1 columns to left
temp_shiftrows = state[1][0]
state[1][0] = state[1][1]
state[1][1] = state[1][2]
state[1][2] = state[1][3]
state[1][3] = temp_shiftrows

--Rotate second row 2 columns to left
temp_shiftrows = state[2][0]
state[2][0] = state[2][2]
state[2][2] = temp_shiftrows

temp_shiftrows = state[2][1]
state[2][1] = state[2][3]
state[2][13] = temp_shiftrows


--Rotate third row 3 columns to left
temp_shiftrows = state[3][0]
state[3][0] = state[3][3]
state[3][3] = state[3][2]
state[3][2] = state[3][1]
state[3][1] = temp_shiftrows

--mixcoloum



--addroundkey(int round)

for i=0,4-1,1 do
for j=0,4-1,1 do

state[j][i] =state[j][i] ^ roundkey[round * nb * 4 + i * nb + j];

end
end

end


--The last round is given below.
--The MixColumns function is not here in the last round.


for round=0,nr-1,1 do

--SubBytes()

for i=0,4-1,1 do
for j=0,4-1,1 do

state[i][j] = sbox[state[i][j]]

end
end


--ShiftRows()

--Rotate first row 1 columns to left
temp_shiftrows = state[1][0]
state[1][0] = state[1][1]
state[1][1] = state[1][2]
state[1][2] = state[1][3]
state[1][3] = temp_shiftrows

--Rotate second row 2 columns to left
temp_shiftrows = state[2][0]
state[2][0] = state[2][2]
state[2][2] = temp_shiftrows

temp_shiftrows = state[2][1]
state[2][1] = state[2][3]
state[2][13] = temp_shiftrows


--Rotate third row 3 columns to left
temp_shiftrows = state[3][0]
state[3][0] = state[3][3]
state[3][3] = state[3][2]
state[3][2] = state[3][1]
state[3][1] = temp_shiftrows


--mixcoloum


for i=0,4-1,1 do

t = state[0][i]
 tmp = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i]
 tm = state[0][i] ^ state[1][i] 
 tm = bit.lshift(tm, 1)  ^ (( bit.rshift(tm, 7)  and 1) * 0x1b)
 state[0][i] =state[0][i] ^ tm ^ tmp

tm = state[1][i] ^ state[2][i] 
 tm = bit.lshift(tm, 1)  ^ (( bit.rshift(tm, 7)  and 1) * 0x1b)
  state[1][i] =state[1][i] ^ tm ^ tmp 

tm = state[2][i] ^ state[3][i] 
 tm = bit.lshift(tm, 1)  ^ (( bit.rshift(tm, 7)  and 1) * 0x1b)
  state[2][i] =  state[2][i] ^ tm ^ tmp 

  tm = state[3][i] ^ t 
   tm = bit.lshift(tm, 1)  ^ (( bit.rshift(tm, 7)  and 1) * 0x1b)
    state[3][i] =   state[3][i] ^ tm ^ tmp ;

end



--addroundkey(int nr)

for i=0,4-1,1 do
for j=0,4-1,1 do

state[j][i] =state[j][i] ^ roundkey[nr * nb * 4 + i * nb + j];

end
end

end--round for loop 
--The encryption process is over.
--Copy the state array to output array.

for i=0,4-1,1 do
for j=0,4-1,1 do

 out[i*4+j] = state[j][i]

end
end


print("")
print("Text after encryption:")

for i=0,nb*4,1 do

print("")
print(out[i])

end
